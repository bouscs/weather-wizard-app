name: VGit Create Feature
on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Name for the new branch'
        required: true
        type: string
      request:
        description: 'Feature request description'
        required: true
        type: string
      username:
        description: 'GitHub username'
        required: true
        type: string
      project_name:
        description: 'Project name'
        required: true
        type: string
      current_node:
        description: 'Current workspace node (optional)'
        required: false
        type: string
      base_branch:
        description: 'Base branch to create feature from'
        required: false
        type: string
        default: 'main'

jobs:
  create-feature:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write        # For git operations (checkout, commit, push)
      id-token: write       # For Claude Code action OIDC authentication
      actions: read         # For workflow operations
    
    steps:
      - name: Validate inputs
        run: |
          if [ -z "${{ github.event.inputs.branch_name }}" ]; then
            echo "‚ùå Branch name is required"
            exit 1
          fi
          if [ -z "${{ github.event.inputs.request }}" ]; then
            echo "‚ùå Feature request is required"
            exit 1
          fi
          echo "‚úÖ Inputs validated"
          echo "Branch: ${{ github.event.inputs.branch_name }}"
          echo "Request: ${{ github.event.inputs.request }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "${{ github.event.inputs.username }}"
          git config --global user.email "${{ github.event.inputs.username }}@users.noreply.github.com"

      - name: Create feature branch
        run: |
          echo "üåø Creating feature branch: ${{ github.event.inputs.branch_name }}"
          
          # Ensure we're on the base branch
          git checkout ${{ github.event.inputs.base_branch }}
          git pull origin ${{ github.event.inputs.base_branch }}
          
          # Create and switch to feature branch
          git checkout -b "${{ github.event.inputs.branch_name }}"
          
          echo "‚úÖ Feature branch created successfully"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f "package.json" ]; then
            echo "üì¶ Installing dependencies..."
            npm install
          else
            echo "‚ö†Ô∏è No package.json found, skipping dependency installation"
          fi

      - name: Implement feature with Claude Code
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          settings: |
            {
              "permissions": {
                "allow": [
                  "Write(*)",
                  "Read(*)",
                  "Edit(*)",
                  "Bash(git:*)",
                  "Bash(npm:*)",
                  "Bash(node:*)",
                  "Glob(*)",
                  "Grep(*)"
                ]
              }
            }
          prompt: |
            Implement the following feature request: ${{ github.event.inputs.request }}
            
            You are working on a project in the current directory. Please:
            1. Analyze the existing codebase structure and patterns
            2. Implement the requested feature following the existing patterns
            3. Make sure all files are properly formatted and linted
            4. Create or update any necessary tests
            5. Update documentation if needed
            
            Focus on creating production-ready code that integrates well with the existing codebase.

      - name: Verify changes
        run: |
          echo "üîç Verifying implemented changes..."
          
          # Check if any files were modified
          if git diff --quiet; then
            echo "‚ö†Ô∏è No changes detected. Creating a minimal change to complete the workflow."
            echo "# Feature: ${{ github.event.inputs.request }}" >> FEATURE_LOG.md
            echo "- Implemented on: $(date)" >> FEATURE_LOG.md
            echo "- Branch: ${{ github.event.inputs.branch_name }}" >> FEATURE_LOG.md
            echo "" >> FEATURE_LOG.md
          else
            echo "‚úÖ Changes detected:"
            git diff --name-only
          fi

      - name: Run tests (if available)
        run: |
          echo "üß™ Running tests..."
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            npm test || {
              echo "‚ö†Ô∏è Tests failed, but continuing with feature implementation"
              echo "TEST_FAILURES=true" >> $GITHUB_ENV
            }
          else
            echo "‚ÑπÔ∏è No test script found, skipping tests"
          fi

      - name: Commit changes
        run: |
          echo "üìù Committing changes..."
          
          # Add all changes
          git add .
          
          # Create commit message
          COMMIT_MSG="feat: ${{ github.event.inputs.request }}

          ü§ñ Generated with VGit AI
          
          Branch: ${{ github.event.inputs.branch_name }}
          Requested by: ${{ github.event.inputs.username }}
          
          Co-Authored-By: VGit AI <ai@vgit.app>"
          
          # Commit changes
          git commit -m "$COMMIT_MSG" || {
            echo "‚ùå Commit failed"
            exit 1
          }
          
          echo "‚úÖ Changes committed successfully"

      - name: Push feature branch
        run: |
          echo "üöÄ Pushing feature branch to origin..."
          git push origin "${{ github.event.inputs.branch_name }}" || {
            echo "‚ùå Push failed"
            exit 1
          }
          echo "‚úÖ Feature branch pushed successfully"

      - name: Create deployment preview (if applicable)
        run: |
          echo "üåê Creating deployment preview..."
          
          # Check if this is a web project that can be deployed
          if [ -f "package.json" ] && (grep -q '"build"' package.json || grep -q '"dev"' package.json); then
            echo "üì¶ Web project detected, attempting preview deployment..."
            
            # Build the project
            if grep -q '"build"' package.json; then
              npm run build && {
                echo "PREVIEW_BUILD_SUCCESS=true" >> $GITHUB_ENV
                echo "‚úÖ Build successful"
              } || {
                echo "‚ö†Ô∏è Build failed, skipping preview deployment"
                echo "PREVIEW_BUILD_SUCCESS=false" >> $GITHUB_ENV
              }
            else
              echo "‚ÑπÔ∏è No build script found, skipping preview"
              echo "PREVIEW_BUILD_SUCCESS=false" >> $GITHUB_ENV
            fi
          else
            echo "‚ÑπÔ∏è Not a web project, skipping preview deployment"
            echo "PREVIEW_BUILD_SUCCESS=false" >> $GITHUB_ENV
          fi

      - name: Install Netlify CLI
        if: env.PREVIEW_BUILD_SUCCESS == 'true'
        run: |
          echo "üåê Installing Netlify CLI..."
          npm install -g netlify-cli
          netlify --version

      - name: Deploy to Netlify (if build succeeded)
        if: env.PREVIEW_BUILD_SUCCESS == 'true'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          if [ -n "$NETLIFY_AUTH_TOKEN" ] && [ -n "$NETLIFY_SITE_ID" ]; then
            echo "üöÄ Deploying to Netlify..."
            echo "NETLIFY_AUTH_TOKEN=$NETLIFY_AUTH_TOKEN"
            echo "NETLIFY_SITE_ID=$NETLIFY_SITE_ID"
            
            # Deploy to Netlify with branch alias
            DEPLOY_OUTPUT=$(netlify deploy --dir=dist --alias="${{ github.event.inputs.branch_name }}" --json) || {
              echo "‚ö†Ô∏è Netlify deployment failed, continuing..."
              exit 0
            }
            
            # Extract preview URL
            PREVIEW_URL=$(echo "$DEPLOY_OUTPUT" | jq -r '.deploy_url // empty')
            if [ -n "$PREVIEW_URL" ]; then
              echo "‚úÖ Preview deployed: $PREVIEW_URL"
              echo "PREVIEW_URL=$PREVIEW_URL" >> $GITHUB_ENV
            fi
          else
            echo "‚ÑπÔ∏è Netlify credentials not configured, skipping deployment"
          fi

      - name: Update commit with preview info
        if: env.PREVIEW_URL != ''
        run: |
          echo "üìù Adding preview info to commit..."
          
          # Amend commit with preview information
          UPDATED_COMMIT_MSG="feat: ${{ github.event.inputs.request }}

          ü§ñ Generated with VGit AI
          
          Branch: ${{ github.event.inputs.branch_name }}
          Requested by: ${{ github.event.inputs.username }}
          Preview: ${{ env.PREVIEW_URL }}
          
          ---PREVIEW-INFO---
          preview_url: ${{ env.PREVIEW_URL }}
          screenshot_url: 
          
          Co-Authored-By: VGit AI <ai@vgit.app>"
          
          git commit --amend -m "$UPDATED_COMMIT_MSG"
          git push origin "${{ github.event.inputs.branch_name }}" --force-with-lease

      - name: Create workspace node update payload
        run: |
          echo "üèóÔ∏è Creating workspace node update payload..."
          
          # Get commit SHA
          COMMIT_SHA=$(git rev-parse HEAD)
          
          # Create payload for VGit workspace node creation
          cat > workspace_node_payload.json << EOF
          {
            "repository_full_name": "${{ github.repository }}",
            "branch_name": "${{ github.event.inputs.branch_name }}",
            "commit_sha": "$COMMIT_SHA",
            "username": "${{ github.event.inputs.username }}",
            "project_name": "${{ github.event.inputs.project_name }}",
            "current_node": "${{ github.event.inputs.current_node }}",
            "preview_url": "${{ env.PREVIEW_URL }}",
            "workflow_run_id": "${{ github.run_id }}",
            "created_at": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          }
          EOF
          
          echo "‚úÖ Workspace node payload created"

      - name: Upload workspace payload as artifact
        uses: actions/upload-artifact@v4
        with:
          name: workspace-node-payload
          path: workspace_node_payload.json
          retention-days: 7

      - name: Summary
        run: |
          echo "üéâ Feature creation completed successfully!"
          echo ""
          echo "üìã Summary:"
          echo "- Branch: ${{ github.event.inputs.branch_name }}"
          echo "- Feature: ${{ github.event.inputs.request }}"
          echo "- Repository: ${{ github.repository }}"
          echo "- Commit SHA: $(git rev-parse HEAD)"
          if [ -n "${{ env.PREVIEW_URL }}" ]; then
            echo "- Preview URL: ${{ env.PREVIEW_URL }}"
          fi
          echo "- Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"